<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Element源码分析之popper.js</title>
      <link href="/2019/08/08/Element%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bpopper-js/"/>
      <url>/2019/08/08/Element%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bpopper-js/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>element code version:2.10.1<br>element组件中如Tooltip、Popover、cascader、select类似于这种弹窗跟随目前移动的都是基于popper.js实现的。所以打算分析popper的实现，便于分析这些组件的具体思路。<br>打算先分析code的具体实现，最后总结实现思路<br>源代码加上注释有一千多行，还是蛮长的，这里就贴出主要代码，先从代码的入口构造函数开始吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> root = <span class="built_in">window</span>;</span><br><span class="line"><span class="comment">// default options</span></span><br><span class="line"><span class="keyword">var</span> DEFAULTS = &#123;</span><br><span class="line">    <span class="comment">// 默认popper元素放置在reference元素的下面</span></span><br><span class="line">    placement: <span class="string">'bottom'</span>,</span><br><span class="line"></span><br><span class="line">    gpuAcceleration: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 偏移量，popper元素在reference元素的左边或右边：offset为正就是popper往上偏移，为负往下偏移；</span></span><br><span class="line">    <span class="comment">//如果popper在reference的上边或者下边，为正就是右偏移，负数就是做偏移</span></span><br><span class="line">    offset: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 边界元素</span></span><br><span class="line">    boundariesElement: <span class="string">'viewport'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//界和弹出框之间最小距离的像素大小</span></span><br><span class="line">    boundariesPadding: <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// popper will try to prevent overflow following this order,</span></span><br><span class="line">    <span class="comment">// by default, then, it could overflow on the left and on top of the boundariesElement</span></span><br><span class="line">    preventOverflowOrder: [<span class="string">'left'</span>, <span class="string">'right'</span>, <span class="string">'top'</span>, <span class="string">'bottom'</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the behavior used by flip to change the placement of the popper</span></span><br><span class="line">    flipBehavior: <span class="string">'flip'</span>,</span><br><span class="line"></span><br><span class="line">    arrowElement: <span class="string">'[x-arrow]'</span>,</span><br><span class="line"></span><br><span class="line">    arrowOffset: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list of functions used to modify the offsets before they are applied to the popper</span></span><br><span class="line">    modifiers: [ <span class="string">'shift'</span>, <span class="string">'offset'</span>, <span class="string">'preventOverflow'</span>, <span class="string">'keepTogether'</span>, <span class="string">'arrow'</span>, <span class="string">'flip'</span>, <span class="string">'applyStyle'</span>],</span><br><span class="line"></span><br><span class="line">    modifiersIgnored: [],</span><br><span class="line"></span><br><span class="line">    forceAbsolute: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Popper</span>(<span class="params">reference, popper, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._reference = reference.jquery ? reference[<span class="number">0</span>] : reference;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果popper元素是对象定义的或者没有定义，那就生成一个吧！</span></span><br><span class="line">    <span class="keyword">var</span> isNotDefined = <span class="keyword">typeof</span> popper === <span class="string">'undefined'</span> || popper === <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> isConfig = popper &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(popper) === <span class="string">'[object Object]'</span>;</span><br><span class="line">    <span class="keyword">if</span> (isNotDefined || isConfig) &#123;</span><br><span class="line">        <span class="keyword">this</span>._popper = <span class="keyword">this</span>.parse(isConfig ? popper : &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// otherwise, use the given HTMLElement as popper</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._popper = popper.jquery ? popper[<span class="number">0</span>] : popper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义和默认的options进行合并</span></span><br><span class="line">    <span class="keyword">this</span>._options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// refactoring modifiers' list 将忽略的修改器从列表中移除掉，</span></span><br><span class="line">    <span class="comment">//在修改器等于applyStyle,给popper设置x-placement属性，popper和箭头的一些一些样式是通过属性选择器应用的</span></span><br><span class="line">    <span class="keyword">this</span>._options.modifiers = <span class="keyword">this</span>._options.modifiers.map(<span class="function"><span class="keyword">function</span>(<span class="params">modifier</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// remove ignored modifiers</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._options.modifiersIgnored.indexOf(modifier) !== <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set the x-placement attribute before everything else because it could be used to add margins to the popper</span></span><br><span class="line">        <span class="comment">// margins needs to be calculated to get the correct popper offsets</span></span><br><span class="line">        <span class="keyword">if</span> (modifier === <span class="string">'applyStyle'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._popper.setAttribute(<span class="string">'x-placement'</span>, <span class="keyword">this</span>._options.placement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return predefined modifier identified by string or keep the custom one</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.modifiers[modifier] || modifier;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  确定popper元素定位是fixed还是absolute，然后给popper设置样式</span></span><br><span class="line">    <span class="keyword">this</span>.state.position = <span class="keyword">this</span>._getPosition(<span class="keyword">this</span>._popper, <span class="keyword">this</span>._reference);</span><br><span class="line">    setStyle(<span class="keyword">this</span>._popper, &#123; <span class="attr">position</span>: <span class="keyword">this</span>.state.position, <span class="attr">top</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法厉害了，一系列的坐标运算，最后再按照顺序循环调用modifiers方法。</span></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup event listeners, they will take care of update the position in specific situations</span></span><br><span class="line">    <span class="keyword">this</span>._setupEventListeners();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成popper元素以及箭头</span></span><br><span class="line">Popper.prototype.parse = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaultConfig = &#123;</span><br><span class="line">        tagName: <span class="string">'div'</span>,</span><br><span class="line">        classNames: [ <span class="string">'popper'</span> ],</span><br><span class="line">        attributes: [],</span><br><span class="line">        parent: root.document.body,</span><br><span class="line">        content: <span class="string">''</span>,</span><br><span class="line">        contentType: <span class="string">'text'</span>,</span><br><span class="line">        arrowTagName: <span class="string">'div'</span>,</span><br><span class="line">        arrowClassNames: [ <span class="string">'popper__arrow'</span> ],</span><br><span class="line">        arrowAttributes: [ <span class="string">'x-arrow'</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    config = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultConfig, config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = root.document;</span><br><span class="line">    <span class="comment">//生成popper元素，添加样式和属性</span></span><br><span class="line">    <span class="keyword">var</span> popper = d.createElement(config.tagName);</span><br><span class="line">    addClassNames(popper, config.classNames);</span><br><span class="line">    addAttributes(popper, config.attributes);</span><br><span class="line">    <span class="comment">//根据contentType将content添加到popper元素中</span></span><br><span class="line">    <span class="keyword">if</span> (config.contentType === <span class="string">'node'</span>) &#123;</span><br><span class="line">        popper.appendChild(config.content.jquery ? config.content[<span class="number">0</span>] : config.content);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (config.contentType === <span class="string">'html'</span>) &#123;</span><br><span class="line">        popper.innerHTML = config.content;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        popper.textContent = config.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果有箭头元素那就创建一个吧！再设置下样式和属性</span></span><br><span class="line">    <span class="keyword">if</span> (config.arrowTagName) &#123;</span><br><span class="line">        <span class="keyword">var</span> arrow = d.createElement(config.arrowTagName);</span><br><span class="line">        addClassNames(arrow, config.arrowClassNames);</span><br><span class="line">        addAttributes(arrow, config.arrowAttributes);</span><br><span class="line">        popper.appendChild(arrow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//popper的父元素默认为body，这里对popper的父元素做了一些校验，如果类型字符串那就获取元素；有多个元素就获取第一个，没有就抛错</span></span><br><span class="line">    <span class="keyword">var</span> parent = config.parent.jquery ? config.parent[<span class="number">0</span>] : config.parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent === <span class="string">'string'</span>) &#123;</span><br><span class="line">        parent = d.querySelectorAll(config.parent);</span><br><span class="line">        <span class="keyword">if</span> (parent.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'WARNING: the given `parent` query('</span> + config.parent + <span class="string">') matched more than one element, the first one will be used'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (parent.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">'ERROR: the given `parent` doesn\'t exists!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parent = parent[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the given parent is a DOM nodes list or an array of nodes with more than one element,</span></span><br><span class="line">    <span class="comment">// the first one will be used as parent</span></span><br><span class="line">    <span class="keyword">if</span> (parent.length &gt; <span class="number">1</span> &amp;&amp; parent <span class="keyword">instanceof</span> Element === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'WARNING: you have passed as parent a list of elements, the first one will be used'</span>);</span><br><span class="line">        parent = parent[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将popper添加进父元素</span></span><br><span class="line">    parent.appendChild(popper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> popper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addClassNames</span>(<span class="params">element, classNames</span>) </span>&#123;</span><br><span class="line">        classNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</span><br><span class="line">            element.classList.add(className);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addAttributes</span>(<span class="params">element, attributes</span>) </span>&#123;</span><br><span class="line">        attributes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attribute</span>) </span>&#123;</span><br><span class="line">            element.setAttribute(attribute.split(<span class="string">':'</span>)[<span class="number">0</span>], attribute.split(<span class="string">':'</span>)[<span class="number">1</span>] || <span class="string">''</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//这个方法是用来确定popper的定位是用fixed还是absolute</span></span><br><span class="line"> <span class="comment">//如果没有强制为absolute，那就看看引用元素的父元素是不是fixed。是popper定位为fixed，不是就absolute</span></span><br><span class="line"> Popper.prototype._getPosition = <span class="function"><span class="keyword">function</span>(<span class="params">popper, reference</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//这里这个container根本就没有用到</span></span><br><span class="line">     <span class="keyword">var</span> container = getOffsetParent(reference);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>._options.forceAbsolute) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">'absolute'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> isParentFixed = isFixed(reference, container);</span><br><span class="line">     <span class="keyword">return</span> isParentFixed ? <span class="string">'fixed'</span> : <span class="string">'absolute'</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//这里递归判断position是不是fixed</span></span><br><span class="line"> <span class="comment">//从引用元素的父元素开始往上层元素开始查找</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFixed</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (element === root.document.body) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (getStyleComputedProperty(element, <span class="string">'position'</span>) === <span class="string">'fixed'</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> element.parentNode ? isFixed(element.parentNode) : element;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getStyleComputedProperty</span>(<span class="params">element, property</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> css = root.getComputedStyle(element, <span class="literal">null</span>);</span><br><span class="line">     <span class="keyword">return</span> css[property];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HTMLElement.offsetParent 一个对象引用，当前元素相对于该对象偏移</span></span><br><span class="line"><span class="comment">//MDN：是一个只读属性，返回一个指向最近的（closest，指包含层级上的最近）包含该元素的定位元素。</span></span><br><span class="line"><span class="comment">//如果没有定位的元素，则 offsetParent 为最近的 table, table cell 或根元素。</span></span><br><span class="line"><span class="comment">//当元素的 style.display 设置为 "none" 时，offsetParent 返回 null。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffsetParent</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> offsetParent = element.offsetParent;</span><br><span class="line">    <span class="keyword">return</span> offsetParent === root.document.body || !offsetParent ? root.document.documentElement : offsetParent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Popper.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123; <span class="attr">instance</span>: <span class="keyword">this</span>, <span class="attr">styles</span>: &#123;&#125; &#125;;</span><br><span class="line">    <span class="comment">// store placement inside the data object, modifiers will be able to edit `placement` if needed</span></span><br><span class="line">    <span class="comment">// and refer to _originalPlacement to know the original value</span></span><br><span class="line">    data.placement = <span class="keyword">this</span>._options.placement;</span><br><span class="line">    data._originalPlacement = <span class="keyword">this</span>._options.placement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法计算popper和reference的坐标信息 offsets:&#123;popper:&#123;popper的坐标信息&#125;,reference:&#123;引用元素的坐标信息&#125;&#125;</span></span><br><span class="line">    data.offsets = <span class="keyword">this</span>._getOffsets(<span class="keyword">this</span>._popper, <span class="keyword">this</span>._reference, data.placement);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    data.boundaries = <span class="keyword">this</span>._getBoundaries(data, <span class="keyword">this</span>._options.boundariesPadding, <span class="keyword">this</span>._options.boundariesElement);</span><br><span class="line"></span><br><span class="line">    data = <span class="keyword">this</span>.runModifiers(data, <span class="keyword">this</span>._options.modifiers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//钩子函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.state.updateCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.updateCallback(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算reference和popper的位置信息</span></span><br><span class="line">Popper.prototype._getOffsets = <span class="function"><span class="keyword">function</span>(<span class="params">popper, reference, placement</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//placement可能带有‘-start | -end‘，这里取上下左右大方向</span></span><br><span class="line">        placement = placement.split(<span class="string">'-'</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> popperOffsets = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        popperOffsets.position = <span class="keyword">this</span>.state.position;</span><br><span class="line">        <span class="keyword">var</span> isParentFixed = popperOffsets.position === <span class="string">'fixed'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取reference元素偏移信息，相对于popper.offsetParent的位置</span></span><br><span class="line">        <span class="keyword">var</span> referenceOffsets = getOffsetRectRelativeToCustomParent(reference, getOffsetParent(popper), isParentFixed);</span><br><span class="line">        <span class="comment">//获取popper轮廓大小，自身的大小加上margin</span></span><br><span class="line">        <span class="keyword">var</span> popperRect = getOuterSizes(popper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里根据placement计算popper的上下偏移量，使popper位置根据placement放置在reference上</span></span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">'right'</span>, <span class="string">'left'</span>].indexOf(placement) !== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//使popper在左右位置上，popper和reference元素的中心点水平对齐</span></span><br><span class="line">            popperOffsets.top = referenceOffsets.top + referenceOffsets.height / <span class="number">2</span> - popperRect.height / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (placement === <span class="string">'left'</span>) &#123;</span><br><span class="line">                popperOffsets.left = referenceOffsets.left - popperRect.width;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                popperOffsets.left = referenceOffsets.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//在上下位置上，popper和reference元素的中心点垂直对齐</span></span><br><span class="line">            popperOffsets.left = referenceOffsets.left + referenceOffsets.width / <span class="number">2</span> - popperRect.width / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (placement === <span class="string">'top'</span>) &#123;</span><br><span class="line">                popperOffsets.top = referenceOffsets.top - popperRect.height;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                popperOffsets.top = referenceOffsets.bottom;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Add width and height to our offsets object</span></span><br><span class="line">        popperOffsets.width   = popperRect.width;</span><br><span class="line">        popperOffsets.height  = popperRect.height;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            popper: popperOffsets,</span><br><span class="line">            reference: referenceOffsets</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取reference元素相对于popper.offsetParent的位置</span></span><br><span class="line">    <span class="comment">//因为popper默认父元素为body，这里也可以理解为reference元素相对body的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getOffsetRectRelativeToCustomParent</span>(<span class="params">element, parent, fixed</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> elementRect = getBoundingClientRect(element);</span><br><span class="line">        <span class="keyword">var</span> parentRect = getBoundingClientRect(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fixed) &#123;</span><br><span class="line">            <span class="keyword">var</span> scrollParent = getScrollParent(parent);</span><br><span class="line">            parentRect.top += scrollParent.scrollTop;</span><br><span class="line">            parentRect.bottom += scrollParent.scrollTop;</span><br><span class="line">            parentRect.left += scrollParent.scrollLeft;</span><br><span class="line">            parentRect.right += scrollParent.scrollLeft;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rect = &#123;</span><br><span class="line">            top: elementRect.top - parentRect.top ,</span><br><span class="line">            left: elementRect.left - parentRect.left ,</span><br><span class="line">            bottom: (elementRect.top - parentRect.top) + elementRect.height,</span><br><span class="line">            right: (elementRect.left - parentRect.left) + elementRect.width,</span><br><span class="line">            width: elementRect.width,</span><br><span class="line">            height: elementRect.height</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> rect;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法返回元素的大小及其相对于视口的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getBoundingClientRect</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//对象包含了一组用于描述边框的只读属性——left、top、right和bottom，单位为像素。</span></span><br><span class="line">        <span class="comment">//除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。</span></span><br><span class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// whether the IE version is lower than 11</span></span><br><span class="line">        <span class="keyword">var</span> isIE = navigator.userAgent.indexOf(<span class="string">"MSIE"</span>) != <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fix ie document bounding top always 0 bug</span></span><br><span class="line">        <span class="keyword">var</span> rectTop = isIE &amp;&amp; element.tagName === <span class="string">'HTML'</span></span><br><span class="line">            ? -element.scrollTop</span><br><span class="line">            : rect.top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: rect.left,</span><br><span class="line">            top: rectTop,</span><br><span class="line">            right: rect.right,</span><br><span class="line">            bottom: rect.bottom,</span><br><span class="line">            width: rect.right - rect.left,</span><br><span class="line">            height: rect.bottom - rectTop</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算popper加上margin的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getOuterSizes</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//骚操作，隐藏占位计算大小</span></span><br><span class="line">        <span class="keyword">var</span> _display = element.style.display, _visibility = element.style.visibility;</span><br><span class="line">        element.style.display = <span class="string">'block'</span>; element.style.visibility = <span class="string">'hidden'</span>;</span><br><span class="line">        <span class="keyword">var</span> calcWidthToForceRepaint = element.offsetWidth;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// original method</span></span><br><span class="line">        <span class="keyword">var</span> styles = root.getComputedStyle(element);</span><br><span class="line">        <span class="keyword">var</span> x = <span class="built_in">parseFloat</span>(styles.marginTop) + <span class="built_in">parseFloat</span>(styles.marginBottom);</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">parseFloat</span>(styles.marginLeft) + <span class="built_in">parseFloat</span>(styles.marginRight);</span><br><span class="line">        <span class="keyword">var</span> result = &#123; <span class="attr">width</span>: element.offsetWidth + y, <span class="attr">height</span>: element.offsetHeight + x &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reset element styles</span></span><br><span class="line">        element.style.display = _display; element.style.visibility = _visibility;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取边界元素的大小范围</span></span><br><span class="line"><span class="comment">//如果边界元素是window：body或者html左上角到内容的右下角</span></span><br><span class="line">Popper.prototype._getBoundaries = <span class="function"><span class="keyword">function</span>(<span class="params">data, padding, boundariesElement</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> 1 DOM access here</span></span><br><span class="line">    <span class="keyword">var</span> boundaries = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> width, height;</span><br><span class="line">    <span class="keyword">if</span> (boundariesElement === <span class="string">'window'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> body = root.document.body,</span><br><span class="line">            html = root.document.documentElement;</span><br><span class="line"></span><br><span class="line">        height = <span class="built_in">Math</span>.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight );</span><br><span class="line">        width = <span class="built_in">Math</span>.max( body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth );</span><br><span class="line"></span><br><span class="line">        boundaries = &#123;</span><br><span class="line">            top: <span class="number">0</span>,</span><br><span class="line">            right: width,</span><br><span class="line">            bottom: height,</span><br><span class="line">            left: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundariesElement === <span class="string">'viewport'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> offsetParent = getOffsetParent(<span class="keyword">this</span>._popper);</span><br><span class="line">        <span class="keyword">var</span> scrollParent = getScrollParent(<span class="keyword">this</span>._popper);</span><br><span class="line">        <span class="keyword">var</span> offsetParentRect = getOffsetRect(offsetParent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Thanks the fucking native API, `document.body.scrollTop` &amp; `document.documentElement.scrollTop`</span></span><br><span class="line">        <span class="keyword">var</span> getScrollTopValue = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element == <span class="built_in">document</span>.body ? <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollTop, <span class="built_in">document</span>.body.scrollTop) : element.scrollTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> getScrollLeftValue = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element == <span class="built_in">document</span>.body ? <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollLeft, <span class="built_in">document</span>.body.scrollLeft) : element.scrollLeft;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if the popper is fixed we don't have to substract scrolling from the boundaries</span></span><br><span class="line">        <span class="keyword">var</span> scrollTop = data.offsets.popper.position === <span class="string">'fixed'</span> ? <span class="number">0</span> : getScrollTopValue(scrollParent);</span><br><span class="line">        <span class="keyword">var</span> scrollLeft = data.offsets.popper.position === <span class="string">'fixed'</span> ? <span class="number">0</span> : getScrollLeftValue(scrollParent);</span><br><span class="line">        boundaries = &#123;</span><br><span class="line">            top: <span class="number">0</span> - (offsetParentRect.top - scrollTop),</span><br><span class="line">            right: root.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),</span><br><span class="line">            bottom: root.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),</span><br><span class="line">            left: <span class="number">0</span> - (offsetParentRect.left - scrollLeft)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getOffsetParent(<span class="keyword">this</span>._popper) === boundariesElement) &#123;</span><br><span class="line">            boundaries = &#123;</span><br><span class="line">                top: <span class="number">0</span>,</span><br><span class="line">                left: <span class="number">0</span>,</span><br><span class="line">                right: boundariesElement.clientWidth,</span><br><span class="line">                bottom: boundariesElement.clientHeight</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            boundaries = getOffsetRect(boundariesElement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    boundaries.left += padding;</span><br><span class="line">    boundaries.right -= padding;</span><br><span class="line">    boundaries.top = boundaries.top + padding;</span><br><span class="line">    boundaries.bottom = boundaries.bottom - padding;</span><br><span class="line">    <span class="keyword">return</span> boundaries;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//placement如果有end或start就调整一下popper的位置</span></span><br><span class="line">Popper.prototype.modifiers.shift = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> placement = data.placement;</span><br><span class="line">     <span class="keyword">var</span> basePlacement = placement.split(<span class="string">'-'</span>)[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">var</span> shiftVariation = placement.split(<span class="string">'-'</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if shift shiftVariation is specified, run the modifier</span></span><br><span class="line">     <span class="keyword">if</span> (shiftVariation) &#123;</span><br><span class="line">         <span class="keyword">var</span> reference = data.offsets.reference;</span><br><span class="line">         <span class="keyword">var</span> popper = getPopperClientRect(data.offsets.popper);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">var</span> shiftOffsets = &#123;</span><br><span class="line">             y: &#123;</span><br><span class="line">                 start:  &#123; <span class="attr">top</span>: reference.top &#125;,</span><br><span class="line">                 end:    &#123; <span class="attr">top</span>: reference.top + reference.height - popper.height &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             x: &#123;</span><br><span class="line">                 start:  &#123; <span class="attr">left</span>: reference.left &#125;,</span><br><span class="line">                 end:    &#123; <span class="attr">left</span>: reference.left + reference.width - popper.width &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">var</span> axis = [<span class="string">'bottom'</span>, <span class="string">'top'</span>].indexOf(basePlacement) !== <span class="number">-1</span> ? <span class="string">'x'</span> : <span class="string">'y'</span>;</span><br><span class="line"></span><br><span class="line">         data.offsets.popper = <span class="built_in">Object</span>.assign(popper, shiftOffsets[axis][shiftVariation]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//根据自定义的offset，调整一下popper的位置，left就往上偏移。rigth往下偏移，top往左偏移，bottom往右偏移</span></span><br><span class="line"> Popper.prototype.modifiers.offset = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> offset = <span class="keyword">this</span>._options.offset;</span><br><span class="line">     <span class="keyword">var</span> popper  = data.offsets.popper;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (data.placement.indexOf(<span class="string">'left'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">         popper.top -= offset;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (data.placement.indexOf(<span class="string">'right'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">         popper.top += offset;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (data.placement.indexOf(<span class="string">'top'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">         popper.left -= offset;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (data.placement.indexOf(<span class="string">'bottom'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">         popper.left += offset;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//确保popper不会从边界溢出，确保popper元素在边界内</span></span><br><span class="line"> Popper.prototype.modifiers.preventOverflow = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// preventOverflowOrder: ['left', 'right', 'top', 'bottom'],</span></span><br><span class="line">     <span class="keyword">var</span> order = <span class="keyword">this</span>._options.preventOverflowOrder;</span><br><span class="line">     <span class="keyword">var</span> popper = getPopperClientRect(data.offsets.popper);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> check = &#123;</span><br><span class="line">         left: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> left = popper.left;</span><br><span class="line">             <span class="keyword">if</span> (popper.left &lt; data.boundaries.left) &#123;</span><br><span class="line">                 left = <span class="built_in">Math</span>.max(popper.left, data.boundaries.left);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> &#123; <span class="attr">left</span>: left &#125;;</span><br><span class="line">         &#125;,</span><br><span class="line">         right: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> left = popper.left;</span><br><span class="line">             <span class="keyword">if</span> (popper.right &gt; data.boundaries.right) &#123;</span><br><span class="line">                 left = <span class="built_in">Math</span>.min(popper.left, data.boundaries.right - popper.width);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> &#123; <span class="attr">left</span>: left &#125;;</span><br><span class="line">         &#125;,</span><br><span class="line">         top: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> top = popper.top;</span><br><span class="line">             <span class="keyword">if</span> (popper.top &lt; data.boundaries.top) &#123;</span><br><span class="line">                 top = <span class="built_in">Math</span>.max(popper.top, data.boundaries.top);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> &#123; <span class="attr">top</span>: top &#125;;</span><br><span class="line">         &#125;,</span><br><span class="line">         bottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> top = popper.top;</span><br><span class="line">             <span class="keyword">if</span> (popper.bottom &gt; data.boundaries.bottom) &#123;</span><br><span class="line">                 top = <span class="built_in">Math</span>.min(popper.top, data.boundaries.bottom - popper.height);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> &#123; <span class="attr">top</span>: top &#125;;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     order.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">direction</span>) </span>&#123;</span><br><span class="line">         data.offsets.popper = <span class="built_in">Object</span>.assign(popper, check[direction]());</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//让popper元素跟随reference元素</span></span><br><span class="line"> Popper.prototype.modifiers.keepTogether = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> popper  = getPopperClientRect(data.offsets.popper);</span><br><span class="line">     <span class="keyword">var</span> reference = data.offsets.reference;</span><br><span class="line">     <span class="keyword">var</span> f = <span class="built_in">Math</span>.floor;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (popper.right &lt; f(reference.left)) &#123;</span><br><span class="line">         data.offsets.popper.left = f(reference.left) - popper.width;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (popper.left &gt; f(reference.right)) &#123;</span><br><span class="line">         data.offsets.popper.left = f(reference.right);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (popper.bottom &lt; f(reference.top)) &#123;</span><br><span class="line">         data.offsets.popper.top = f(reference.top) - popper.height;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (popper.top &gt; f(reference.bottom)) &#123;</span><br><span class="line">         data.offsets.popper.top = f(reference.bottom);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> Popper.prototype.modifiers.arrow = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> arrow  = <span class="keyword">this</span>._options.arrowElement;</span><br><span class="line">     <span class="keyword">var</span> arrowOffset = <span class="keyword">this</span>._options.arrowOffset;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if the arrowElement is a string, suppose it's a CSS selector</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> arrow === <span class="string">'string'</span>) &#123;</span><br><span class="line">         arrow = <span class="keyword">this</span>._popper.querySelector(arrow);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if arrow element is not found, don't run the modifier</span></span><br><span class="line">     <span class="keyword">if</span> (!arrow) &#123;</span><br><span class="line">         <span class="keyword">return</span> data;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// the arrow element must be child of its popper</span></span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>._popper.contains(arrow)) &#123;</span><br><span class="line">         <span class="built_in">console</span>.warn(<span class="string">'WARNING: `arrowElement` must be child of its popper element!'</span>);</span><br><span class="line">         <span class="keyword">return</span> data;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// arrow depends on keepTogether in order to work</span></span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.isModifierRequired(<span class="keyword">this</span>.modifiers.arrow, <span class="keyword">this</span>.modifiers.keepTogether)) &#123;</span><br><span class="line">         <span class="built_in">console</span>.warn(<span class="string">'WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!'</span>);</span><br><span class="line">         <span class="keyword">return</span> data;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> arrowStyle  = &#123;&#125;;</span><br><span class="line">     <span class="keyword">var</span> placement   = data.placement.split(<span class="string">'-'</span>)[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">var</span> popper      = getPopperClientRect(data.offsets.popper);</span><br><span class="line">     <span class="keyword">var</span> reference   = data.offsets.reference;</span><br><span class="line">     <span class="keyword">var</span> isVertical  = [<span class="string">'left'</span>, <span class="string">'right'</span>].indexOf(placement) !== <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> len         = isVertical ? <span class="string">'height'</span> : <span class="string">'width'</span>;</span><br><span class="line">     <span class="keyword">var</span> side        = isVertical ? <span class="string">'top'</span> : <span class="string">'left'</span>;</span><br><span class="line">     <span class="keyword">var</span> translate   = isVertical ? <span class="string">'translateY'</span> : <span class="string">'translateX'</span>;</span><br><span class="line">     <span class="keyword">var</span> altSide     = isVertical ? <span class="string">'left'</span> : <span class="string">'top'</span>;</span><br><span class="line">     <span class="keyword">var</span> opSide      = isVertical ? <span class="string">'bottom'</span> : <span class="string">'right'</span>;</span><br><span class="line">     <span class="keyword">var</span> arrowSize   = getOuterSizes(arrow)[len];</span><br><span class="line"></span><br><span class="line">     <span class="comment">//上面是一些arrow元素的判断，</span></span><br><span class="line">     <span class="comment">//下面这个两个判断就是当reference元素要从边界元素消失的时候，调整popper的位置</span></span><br><span class="line">     <span class="comment">// top/left side</span></span><br><span class="line">     <span class="keyword">if</span> (reference[opSide] - arrowSize &lt; popper[side]) &#123;</span><br><span class="line">         data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowSize);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// bottom/right side</span></span><br><span class="line">     <span class="keyword">if</span> (reference[side] + arrowSize &gt; popper[opSide]) &#123;</span><br><span class="line">         data.offsets.popper[side] += (reference[side] + arrowSize) - popper[opSide];</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// compute center of the popper</span></span><br><span class="line">     <span class="keyword">var</span> center = reference[side] + (arrowOffset || (reference[len] / <span class="number">2</span>) - (arrowSize / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> sideValue = center - popper[side];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// prevent arrow from being placed not contiguously to its popper</span></span><br><span class="line">     sideValue = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(popper[len] - arrowSize - <span class="number">8</span>, sideValue), <span class="number">8</span>);</span><br><span class="line">     arrowStyle[side] = sideValue;</span><br><span class="line">     arrowStyle[altSide] = <span class="string">''</span>; <span class="comment">// make sure to remove any old style from the arrow</span></span><br><span class="line"></span><br><span class="line">     data.offsets.arrow = arrowStyle;</span><br><span class="line">     data.arrowElement = arrow;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line"> &#125;;</span><br><span class="line"> Popper.prototype.modifiers.applyStyle = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// apply the final offsets to the popper</span></span><br><span class="line">     <span class="comment">// <span class="doctag">NOTE:</span> 1 DOM access here</span></span><br><span class="line">     <span class="keyword">var</span> styles = &#123;</span><br><span class="line">         position: data.offsets.popper.position</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// round top and left to avoid blurry text</span></span><br><span class="line">     <span class="keyword">var</span> left = <span class="built_in">Math</span>.round(data.offsets.popper.left);</span><br><span class="line">     <span class="keyword">var</span> top = <span class="built_in">Math</span>.round(data.offsets.popper.top);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if gpuAcceleration is set to true and transform is supported, we use `translate3d` to apply the position to the popper</span></span><br><span class="line">     <span class="comment">// we automatically use the supported prefixed version if needed</span></span><br><span class="line">     <span class="keyword">var</span> prefixedProperty;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>._options.gpuAcceleration &amp;&amp; (prefixedProperty = getSupportedPropertyName(<span class="string">'transform'</span>))) &#123;</span><br><span class="line">         styles[prefixedProperty] = <span class="string">'translate3d('</span> + left + <span class="string">'px, '</span> + top + <span class="string">'px, 0)'</span>;</span><br><span class="line">         styles.top = <span class="number">0</span>;</span><br><span class="line">         styles.left = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// othwerise, we use the standard `left` and `top` properties</span></span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         styles.left =left;</span><br><span class="line">         styles.top = top;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// any property present in `data.styles` will be applied to the popper,</span></span><br><span class="line">     <span class="comment">// in this way we can make the 3rd party modifiers add custom styles to it</span></span><br><span class="line">     <span class="comment">// Be aware, modifiers could override the properties defined in the previous</span></span><br><span class="line">     <span class="comment">// lines of this modifier!</span></span><br><span class="line">     <span class="built_in">Object</span>.assign(styles, data.styles);</span><br><span class="line"></span><br><span class="line">     setStyle(<span class="keyword">this</span>._popper, styles);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// set an attribute which will be useful to style the tooltip (use it to properly position its arrow)</span></span><br><span class="line">     <span class="comment">// <span class="doctag">NOTE:</span> 1 DOM access here</span></span><br><span class="line">     <span class="keyword">this</span>._popper.setAttribute(<span class="string">'x-placement'</span>, data.placement);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if the arrow modifier is required and the arrow style has been computed, apply the arrow style</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.isModifierRequired(<span class="keyword">this</span>.modifiers.applyStyle, <span class="keyword">this</span>.modifiers.arrow) &amp;&amp; data.offsets.arrow) &#123;</span><br><span class="line">         setStyle(data.arrowElement, data.offsets.arrow);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">//element的css都带有’el-‘前缀这里就省略了，并且使用了sass的写法</span><br><span class="line"><span class="selector-class">.popper</span>&#123;</span><br><span class="line">  //这一部分都是那个小箭头的样式,用伪元素边框显示了一个三角形，不管在上下左右它的位置都是居中的</span><br><span class="line">  <span class="selector-class">.popper__arrow</span>,</span><br><span class="line">  <span class="selector-class">.popper__arrow</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.popper__arrow</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(0 2px 12px rgba(0, 0, 0, 0.03))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.popper__arrow</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">6px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="top"]</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="top"]</span> <span class="selector-class">.popper__arrow</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#EBEEF5</span>;</span><br><span class="line">    <span class="attribute">border-bottom-width</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">        <span class="selector-tag">bottom</span>: 1<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">margin-left</span>: <span class="selector-tag">-6px</span>;</span><br><span class="line">        <span class="selector-tag">border-top-color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">        <span class="selector-tag">border-bottom-width</span>: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="bottom"]</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="bottom"]</span> <span class="selector-class">.popper__arrow</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="number">#EBEEF5</span>;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="selector-tag">top</span>: 1<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">margin-left</span>: <span class="selector-tag">-6px</span>;</span><br><span class="line">      <span class="selector-tag">border-top-width</span>: 0;</span><br><span class="line">      <span class="selector-tag">border-bottom-color</span>: <span class="selector-id">#FFFFFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="right"]</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="right"]</span> <span class="selector-class">.popper__arrow</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#EBEEF5</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="selector-tag">bottom</span>: <span class="selector-tag">-6px</span>;</span><br><span class="line">      <span class="selector-tag">left</span>: 1<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">border-right-color</span>: <span class="selector-id">#FFFFFF</span>;</span><br><span class="line">      <span class="selector-tag">border-left-width</span>: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="left"]</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-attr">[x-placement^="left"]</span> <span class="selector-class">.popper__arrow</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#EBEEF5</span>;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="selector-tag">right</span>: 1<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">bottom</span>: <span class="selector-tag">-6px</span>;</span><br><span class="line">      <span class="selector-tag">margin-left</span>: <span class="selector-tag">-6px</span>;</span><br><span class="line">      <span class="selector-tag">border-right-width</span>: 0;</span><br><span class="line">      <span class="selector-tag">border-left-color</span>: <span class="selector-id">#FFFFFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack技巧</title>
      <link href="/2019/08/05/webpack%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/08/05/webpack%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="webpack之require-context"><a href="#webpack之require-context" class="headerlink" title="webpack之require.context()"></a>webpack之require.context()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：使用 require.context() 方法来创建自己的（模块）上下文，从而实现自动动态require组件。</span></span><br><span class="line"><span class="comment">//这个方法需要3个参数：要搜索的文件夹目录，是否还应该搜索它的子目录，以及一个匹配文件的正则表达式。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalizeFirstLetter</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.charAt(<span class="number">0</span>).toUpperCase() + string.slice(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(<span class="string">'.'</span>, <span class="literal">false</span>, /\.vue$/)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line">    <span class="comment">//因为得到的filename格式是: './baseButton.vue', 所以这里我们去掉头和尾，只保留真正的文件名</span></span><br><span class="line">  <span class="keyword">const</span> componentName = capitalizeFirstLetter(fileName.replace(<span class="regexp">/^\.\//</span>, <span class="string">''</span>).replace(<span class="regexp">/\.\w+$/</span>, <span class="string">''</span>))</span><br><span class="line">  Vue.component(componentName, componentConfig.default || componentConfig)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuex-源码分析</title>
      <link href="/2019/07/22/vuex-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/07/22/vuex-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vuex version 3.1.1</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里会调用src/index.js的install方法</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//src/index.js</span></span><br><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//防止vuex多次初始化</span></span><br><span class="line">  <span class="keyword">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        <span class="string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  applyMixin(Vue)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//applyMixin  </span></span><br><span class="line"><span class="keyword">const</span> applyMixin = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">  <span class="comment">//判断vue的版本，如果大于2版本，使用全局混入方式，在vux组件初始化生命周期'beforeCreate'中执行vuexInit方法</span></span><br><span class="line">  <span class="comment">//混入同名函数默认规则：同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</span></span><br><span class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// override init and inject vuex init procedure</span></span><br><span class="line">    <span class="comment">// for 1.x backwards compatibility.</span></span><br><span class="line">    <span class="keyword">const</span> _init = Vue.prototype._init</span><br><span class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      options.init = options.init</span><br><span class="line">        ? [vuexInit].concat(options.init)</span><br><span class="line">        : vuexInit</span><br><span class="line">      _init.call(<span class="keyword">this</span>, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">   * this.$options vue组件初始化选项，判断当选vue组件options是否存在store对象，存在直接给this.$store赋值，不存在</span></span><br><span class="line"><span class="comment">   * 从父实例获取。</span></span><br><span class="line"><span class="comment">   * 一般在app.js或者main.js我们初始化vue的时候，使用vuex会传入我们创建的store实例如下：</span></span><br><span class="line"><span class="comment">        new Vue(&#123;</span></span><br><span class="line"><span class="comment">        el: '#app',</span></span><br><span class="line"><span class="comment">        store,</span></span><br><span class="line"><span class="comment">        render: h =&gt; h(App)</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">   * 这样最顶层的vue实例选项中就有了store对象。而vuex在beforeCreate生命周期里全局混入了vuexInit方法，这样就做到了为vue组件自动</span></span><br><span class="line"><span class="comment">   *注入了store实例，在vue组件中通过this.$store使用vuex</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">    <span class="comment">// store injection</span></span><br><span class="line">    <span class="keyword">if</span> (options.store) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store = <span class="keyword">typeof</span> options.store === <span class="string">'function'</span></span><br><span class="line">        ? options.store()</span><br><span class="line">        : options.store</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store = options.parent.$store</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="store初始化"><a href="#store初始化" class="headerlink" title="store初始化"></a>store初始化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个store实例</span></span><br><span class="line">conse store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;&#125;,</span><br><span class="line">  getters:&#123;&#125;,</span><br><span class="line">  mutations:&#123;&#125;,</span><br><span class="line">  action:&#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">  strict: <span class="built_in">Boolean</span>,</span><br><span class="line">  plugins: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//src/index.js  javascript中一般使用_下划线表示私有变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">      install(<span class="built_in">window</span>.Vue)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; plugins = [],strict = <span class="literal">false</span>&#125; = options</span><br><span class="line">    <span class="comment">// store internal state</span></span><br><span class="line">    <span class="keyword">this</span>._committing = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>._actionSubscribers = []</span><br><span class="line">    <span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(options)</span><br><span class="line">    <span class="keyword">this</span>._modulesNamespaceMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>._subscribers = []</span><br><span class="line">    <span class="keyword">this</span>._watcherVM = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将实例对象的dispatch和commit方法重定向到原型上的dispatch和commit方法，中间多传了一个store对象</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, commit &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">boundDispatch</span> (<span class="params">type, payload</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> dispatch.call(store, type, payload)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.commit = <span class="function"><span class="keyword">function</span> <span class="title">boundCommit</span> (<span class="params">type, payload, options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> commit.call(store, type, payload, options)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.strict = strict</span><br><span class="line">    <span class="keyword">const</span> state = <span class="keyword">this</span>._modules.root.state</span><br><span class="line">    <span class="comment">// init root module.</span></span><br><span class="line">    <span class="comment">// this also recursively registers all sub-modules</span></span><br><span class="line">    <span class="comment">// and collects all module getters inside this._wrappedGetters</span></span><br><span class="line">    installModule(<span class="keyword">this</span>, state, [], <span class="keyword">this</span>._modules.root)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//src/module/module-collection.js 和 module.js 一个模块集合一个模块对象。 模块初始化流程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModuleCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (rawRootModule) &#123;</span><br><span class="line">        <span class="comment">// register root module (Vuex.Store options)</span></span><br><span class="line">        <span class="keyword">this</span>.register([], rawRootModule, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    register (path, rawModule, runtime = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newModule = <span class="keyword">new</span> Module(rawModule, runtime)</span><br><span class="line">        <span class="keyword">if</span> (path.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = newModule</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> parent = <span class="keyword">this</span>.get(path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">            parent.addChild(path[path.length - <span class="number">1</span>], newModule)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// register nested modules</span></span><br><span class="line">        <span class="comment">//forEachValue = (obj, fn) =&gt; &#123;Object.keys(obj).forEach(key =&gt; fn(obj[key], key))&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (rawModule.modules) &#123;</span><br><span class="line">            forEachValue(rawModule.modules, (rawChildModule, key) =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.register(path.concat(key), rawChildModule, runtime)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    get (path) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.reduce(<span class="function">(<span class="params"><span class="built_in">module</span>, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">module</span>.getChild(key)</span><br><span class="line">    &#125;, <span class="keyword">this</span>.root)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (rawModule, runtime) &#123;</span><br><span class="line">    <span class="keyword">this</span>.runtime = runtime</span><br><span class="line">    <span class="comment">// Store some children item</span></span><br><span class="line">    <span class="keyword">this</span>._children = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// Store the origin module object which passed by programmer</span></span><br><span class="line">    <span class="keyword">this</span>._rawModule = rawModule</span><br><span class="line">    <span class="keyword">const</span> rawState = rawModule.state</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the origin module's state</span></span><br><span class="line">    <span class="keyword">this</span>.state = (<span class="keyword">typeof</span> rawState === <span class="string">'function'</span> ? rawState() : rawState) || &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">    addChild (key, <span class="built_in">module</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._children[key] = <span class="built_in">module</span></span><br><span class="line">  &#125;</span><br><span class="line">    getChild (key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._children[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在new ModuleCollection对象的时候，我们传入了根store实例，在构造方法中调用register方法</span></span><br><span class="line"><span class="comment">//register方法会递归注册子modules</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">const rootStore = &#123;</span></span><br><span class="line"><span class="comment">    modules:&#123;</span></span><br><span class="line"><span class="comment">      home:&#123;</span></span><br><span class="line"><span class="comment">          modules:&#123;</span></span><br><span class="line"><span class="comment">              tab1:&#123;&#125;,</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">最终解析结果：</span></span><br><span class="line"><span class="comment">    ModuleCollection:&#123;</span></span><br><span class="line"><span class="comment">        root : Module:&#123;</span></span><br><span class="line"><span class="comment">                    _children:Module:&#123;</span></span><br><span class="line"><span class="comment">                        'home':Module:&#123;</span></span><br><span class="line"><span class="comment">                            _children:&#123;</span></span><br><span class="line"><span class="comment">                                'tab1':Module</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">              </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解析register流程</span></span><br><span class="line"><span class="comment">第一次：([],rootStore,false) =&gt; &#123;</span></span><br><span class="line"><span class="comment">     const newModule = new Module(rootStore, false)</span></span><br><span class="line"><span class="comment">    this.root = newModule</span></span><br><span class="line"><span class="comment">    //递归注册子模块 </span></span><br><span class="line"><span class="comment">    forEachValue(rootStore, (rootStore['home'], 'home') =&gt; &#123;</span></span><br><span class="line"><span class="comment">        this.register(['home'], rootStore['home'], false)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次：(['home'],rootStore['home'],false) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    const newModule = new Module(rootStore['home'], false)</span></span><br><span class="line"><span class="comment">    //获取子模块的父对象</span></span><br><span class="line"><span class="comment">    const parent = this.get([]) &lt;==&gt; parent = this.root </span></span><br><span class="line"><span class="comment">    parent.addChild(home, newModule)</span></span><br><span class="line"><span class="comment">    //再次递归子模块</span></span><br><span class="line"><span class="comment">    forEachValue(rootStore['home'], (rootStore['home']['tab1'], 'tab1') =&gt; &#123;</span></span><br><span class="line"><span class="comment">        this.register(['home','tab1'], rootStore['home']['tab1'], false)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第三次 (['home','tab1'],rootStore['home']['tab1'],false) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    const newModule = new Module(rootStore['home']['tab1'], false)</span></span><br><span class="line"><span class="comment">    const parent = this.get([home]) &lt;==&gt; parent = this.rootStore['home'] </span></span><br><span class="line"><span class="comment">     parent.addChild('tab1', newModule)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis</title>
      <link href="/2019/03/22/mybatis/"/>
      <url>/2019/03/22/mybatis/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring</title>
      <link href="/2019/03/13/spring/"/>
      <url>/2019/03/13/spring/</url>
      <content type="html"><![CDATA[<p><a href="http://repo.spring.io/release/org/springframework/spring" target="_blank" rel="noopener">spring Jar download</a></p><p>spring的核心是控制反转(ioc)和面向切面(AOP)</p><p>1.jar包依赖:</p><pre><code>1.1.核心jar包:beans,context,core,expression1.2.依赖jar包:日志包com.springsource.org.apache.commons.logging,com.springsource.org.apache.log4j</code></pre><p>2.编写spring配置文件:applicationContext.xml</p><pre><code>2.1.核心配置 &lt;bean id=&quot;唯一id值&quot;         class=&quot;具体实现类&quot;          name=”和id标签作用相同，但id值不能出现特殊字符,name可以。开发一般不用”         scope=”singleton,prototype,request,session,globalsession“          init-method=”当bean被载入容器的时候调用指定方法“          destroy-method=&quot;当bean从容器删除的时候调用指定方法&quot;&gt;         &lt;!--属性依赖注入--&gt;         &lt;property name=&quot;需要注入的属性名称&quot; value=&quot;注入的属性值&quot;/&gt;         &lt;property name=&quot;需要注入的属性名称&quot; ref=&quot;引用对象的id&quot;/&gt;         &lt;!--构造函数依赖注入--&gt;        &lt;constructor-arg name=&quot;属性名称&quot; value=&quot;属性值&quot;/&gt;        &lt;constructor-arg name=&quot;属性名称&quot; ref=&quot;引用对象的id&quot;/&gt;        &lt;constructor-arg index=&quot;构造参数索引从0开始&quot; value=&quot;属性值&quot;/&gt;        &lt;constructor-arg index=&quot;构造参数索引从0开始&quot; ref=&quot;引用对象的id&quot;/&gt;        &lt;!-- 集合注入List,Set,Map --&gt;        &lt;property name=&quot;list&quot;&gt;            &lt;list&gt;                &lt;value&gt;属性值&lt;/value&gt;                &lt;/list&gt;        &lt;/property&gt;        &lt;property name=&quot;map&quot;&gt;            &lt;map&gt;                &lt;entry key=&quot;&quot; value=&quot;&quot;/&gt;             &lt;/map&gt;        &lt;/property&gt;        &lt;!--属性文件赋值--&gt;        &lt;property name=&quot;pro&quot;&gt;           &lt;props&gt;            &lt;prop key=&quot;properties 属性名称&quot;&gt;properties 属性值&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;&lt;/bean&gt;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性:scope</span><br><span class="line">属性值:</span><br><span class="line">singleto:单例,默认值</span><br><span class="line">prototype:多例，在spring框架整合struts2框架的时候，Action类也需要交给spring做管理，需要把Action类配置成多例</span><br><span class="line">request:应用在web项目中，每次http请求都会创建一个新的bean</span><br><span class="line">session:应用在web项目中，同一个http session 共享一个bean</span><br><span class="line">globalsessio:应用在web项目中，多服务器间的session</span><br></pre></td></tr></table></figure><p>3.spring整合web</p><pre><code>3.1.引入spring-web jar包，配置初始化监听器，设置文件加载路径 &lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!-- 默认只能加载WEB-INF目录下的配置文件，提供配置方式，加载src目录下 --&gt;&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;   3.2.获取ApplicationContext对象    WebApplicationContext c = WebApplicationContextUtils.getWebApplicationContext(ServletContext);</code></pre><p>4.spring框架IOC注解方式</p><pre><code>4.1.引入spring-aop-4.2.4.RELEASE.jar在applicationContext.xml配置文件中配置context约束，配置注解扫描&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd          http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;!-- 开始注解扫描 --&gt;    &lt;context:component-scan base-package=&quot;包名&quot;/&gt;&lt;/beans&gt;注解:@Component 组件，作用在类上(value=&quot;相当于xmlbean配置的id&quot;) spring提供@Component的三个衍生注解@Controller 作用在web层@Service     作用在业务层@Repository 作用在持久层属性注入的注解（使用注解注入的方式，可以不用提示set方法）@value 用于注入普通类型注入的是对象类型            @Autowired:默认按类型进行自动装配            @Qualifier:强制使用名称注入@Resource 相当于@Autowired和@Qualifier一起使用Bean作用范围注解@Scope，作用在类上，值有singleton 单例默认值，prototype 多例@PostConstruct 相当于init-method@PreDestroy 相当于destroy-method</code></pre><p>5.spring整合JUnit单元测试</p><pre><code>5.1.引入JUnit4jar包，引入spring-testjar包在类上面增加注解@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)最后注解获取属性进行测试</code></pre><p>6.spring核心AOP(面向切面编程)</p><pre><code>6.1.底层采用的是代理技术，代理的方式提供了两种1.基于JDK的动态代理：必须是面向接口的，只有实现了具体接口的类才能生成代理对象2.基于CGLIB动态代理：对于没有实现了接口的类，也可以产生代理，产生这个类的子类的方式6.2.AOP相关术语Joinpoint:连接点，是指那些被拦截到的点。Pointcut:切入点，是指我们要对那些Jointpoint进行拦截的定义Advice:通知/增强，是指拦截到Joinpoint之后所要做的事情就是通知。通知分为：前置通知，后置通知，异常通知，最终通知，环绕通知（切面要完成的功能）Introduction:引介，是一种特殊的通知在不修改类代码的前提下，Introduction可以在运行期为类动态地添加一些方法或FiledTarget:目标对象，代理的目标对象Weaving:织入，是指把增强应用到目标对象来创建新的代理对象的过程Proxy:代理，一个类被AOP织入增强后，就产生一个结果代理类Aspect:切面，切入点和通知的结合6.3.引入jar包：spring-aop,spring-aspects,com.springsource.org.aopalliance,com.springsource.org.aspectj.weaver6.4.配置文件中配置约束&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;/beans&gt;编写切面类Aspect，配置AOP &lt;aop:config proxy-target-class=&quot;true&quot;&gt;    &lt;!--配置切面类:切入点+通知--&gt;    &lt;aop:aspect ref=&quot;增加类引用&quot;&gt;        &lt;aop:before method=&quot;log&quot; pointcut=&quot;execution(切入点表达式)&quot;/&gt;    &lt;/aop:aspect&gt;&lt;/aop:config&gt;切入点表达式：            1.execution()固定的必须写            2.public修饰符可以省略            3.返回值类型必须写(* 表示任意返回值)            4.包名也必须写可以用*代替，简写方式：*..*表示任意包结构            5.类名也必须写，可以用*号简写：*DaoImpl            6.方法也必须写，可以用*号简写            7.方法的参数:一个*表示一个参数，..表示任意的参数通知类型：            1.前置通知，在目标类方法执行之前执行。配置标签&lt;aop:after/&gt;            2.最终通知，在目标类的方法执行之后执行，如果程序出现了异常，最终通知也会执行&lt;aop:after/&gt;            3.后置通知，方法正常执行后的通知&lt;aop:after-returning/&gt;            4.异常抛出通知，在跑出异常后的通知&lt;aop:after-throwing/&gt;            5.环绕通知，方法的执行前后执行&lt;aop:around/&gt;注意目标的方法默认不执行，需要使用ProceedingJoinPoint对象来让目标对象的方法执行。</code></pre><p>7.spring AOP 注解方式</p><pre><code>7.1.创建切面类，增加@Aspect注解，编写切面方法，增加通知注解，在配置文件中增加&lt;aop:aspectj-autoproxy/&gt;开启自动注解通知注解:        @Before前置通知        @AfterReturing后置通知        @After最终通知        @Around环绕通知        @AfterThrowing异常抛出通知</code></pre><p>8.spring框架的JDBC模板技术</p><pre><code>8.1 spring提供了JDBC模板 JdbcTemplate类，简化持久层编程spring框架可以整合Hibernate框架，提供了模板类HibernateTemplate8.2 引入JDBC模板jar包:spring-jdbc,spring-tx&lt;!--配置连接池 spring默认提供的连接池--&gt;&lt;bean id=&quot;datasource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.2.224:3306/spring?serverTimezone=GMT&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/bean&gt;&lt;!--配置jdbctemplate--&gt;&lt;bean id=&quot;jdbctemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;&lt;/bean&gt;配置dbcp或c3p0连接池：引入com.springsource.org.apache.commons.pool.jar 和引入dbcp.jar或c3p0jar包&lt;!--配置DBCP连接池--&gt;&lt;bean id=&quot;datasource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.2.224:3306/spring?serverTimezone=GMT&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/bean&gt;&lt;!--配置C3P0连接池--&gt;&lt;bean id=&quot;datasource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://192.168.2.224:3306/spring?serverTimezone=GMT&quot;/&gt;    &lt;property name=&quot;user&quot; value=&quot;root&quot; /&gt;    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/bean&gt;</code></pre><p>9.spring框架的事务管理相关类和API</p><pre><code>PlatFormTransactionMananger接口：平台事务管理器（真正管理事务的类），该接口有具体的实现类，根据不同的持久层框架，需要选择不同的实现类。TransactionDefinition接口:事务定义信息（事务的隔离级别 ，传播行为，超时，只读）TransactionStatus接口:事务的状态上述对象之间的关系：平台事务管理器真正管理事务对象。根据事务定义的信息TransactionDefinition进行事务管理，在管理事务中产生一些状态，将状态记录到TransactionStatus中。9.1.事务隔离级别的常量    ISOLATION_DEFAULT 采用数据库的默认隔离级别    ISOLATION_READ_UNCOMMITTED    ISOLATION_READ_COMMITTED    ISOLATION_REPEATABLE_READ    ISOLATION_SERIALIZABLE事务的传播行为常量（解决的是业务层之间的方法调用）    *PROPAGATION_REQUIRED --A中有事务，使用A中的事务，如果没有，B就会开启一个新的事务，将A包含进来（保证A，B在同一个事务中），默认值    PROPAGATION_SUPPORTS --A中有事务，使用A中的事务，如果A中没有事务，那么B也不使用事务    PROPAGATION_MANDATORY --A中有事务，使用A中的事务，如果A没有事务，抛出异常    *PROPAGATION_REQUIRES_NEW --A中有事务，将A中的事务挂起，B创建一个新的事务（保证AB没有在一个事务中）    PROPAGATION_NOT_SUPPORTED --A中有事务，将A中的事务挂起    PROPAGATION_NEVER --A中有事务，抛出异常    PROPAGATION_NESTED --嵌套事务，当A执行之后,就会在这个位置设置一个保存点，如果B没有问题，执行通过。如果B出现异常， 根据需求回滚（选择回滚到保存点或者最初始状态）9.2.spring事务分类:    spring的编程式事务管理(不推荐),通过手动编写代码的方式完成事务的管理    &lt;!--配置事务管理器--&gt;    &lt;bean id=&quot;transactionManager&quot;                     class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;    &lt;/bean&gt;    &lt;!--配置事务管理模板--&gt;    &lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;    &lt;/bean&gt;    &lt;!--在需要进行事务管理的类中，注入事务管理的模板--&gt;    &lt;bean id=&quot;accountService&quot; class=&quot;com.fuchen.coding.service.impl.AccountServiceImpl&quot;&gt;        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;/&gt;        &lt;property name=&quot;transactionTemplate&quot; ref=&quot;transactionTemplate&quot;/&gt;    &lt;/bean&gt;    spring的声明式事务管理(底层采用AOP技术)，通过一段配置的方式完成事务的管理（掌握注解的方式）    &lt;!--开启事务注解--&gt;    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;    在类上面添加@Transactional注解，表示当前这个类中的所有方法都有事务,也可以添加到方法上面，表示当前方法有事务</code></pre><p>10.spring整合struts2,hibernate</p><pre><code>10.1.spring整合struts2框架两种方式    1.action由struts2框架来创建，在action类中提供service属性和set方法，struts2框架会按名称自动注入。    2.action由spring框架来创建，在spring配置文件中配置多例action，在struts2配置文件中class由全类名改为编写id值就ok,最后手动注入service。10.2.spring整合hibernate第一种(带有hibernate.cfg.xml)，dao继承HibernateDaoSupport，在spring配置文件中配置：&lt;!--编写bean，名称都是固定的，加载hibernate.cfg.xml的配置文件--&gt;&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:hibernate.cfg.xml&quot;/&gt;&lt;/bean&gt;在dao中注入sessionFactory&lt;!--配置事务管理器--&gt;&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;&gt;    &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;/&gt;&lt;/bean&gt;在service增加事务注解：@Transactional第二种(不带有hibernate.cfg.xml):在spring中增加配置&lt;!--配置C3P0连接池--&gt;&lt;bean id=&quot;datasource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://192.168.2.224:3306/ssh?serverTimezone=GMT&quot;/&gt;    &lt;property name=&quot;user&quot; value=&quot;root&quot; /&gt;    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/bean&gt;&lt;!--编写bean，名称都是固定的，加载hibernate.cfg.xml的配置文件--&gt;&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&gt;    &lt;!--加载拦截池--&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;    &lt;!--配置可选--&gt;    &lt;property name=&quot;hibernateProperties&quot;&gt;        &lt;props&gt;            &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;            &lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;            &lt;prop key=&quot;hibernate.format_sql&quot;&gt;true&lt;/prop&gt;            &lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;    &lt;!--配置映射文件--&gt;    &lt;property name=&quot;mappingResources&quot;&gt;        &lt;list&gt;            &lt;value&gt;com/fuchen/coding/domain/Customer.hbm.xml&lt;/value&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;10.3.延时加载解决方案    增加一个过滤器    &lt;!--解决延时加载的问题--&gt;    &lt;filter&gt;        &lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.orm.hibernate5.support.OpenSessionInViewFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;</code></pre>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6</title>
      <link href="/2018/07/10/es6/"/>
      <url>/2018/07/10/es6/</url>
      <content type="html"><![CDATA[<h1 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h1><h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><p>let：用来生命变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码库内有效。<br>let声明的变量不存在变量提升，一定要在声明后使用，否则报错。</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。</p><h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><p>let不允许在相同作用域内，重复声明同一个变量。</p><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">以前，为变量赋值，只能直接指定值。</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span> = <span class="number">3</span>;</span><br><span class="line">ES6 允许写成下面这样。</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</span><br><span class="line">本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</span><br></pre></td></tr></table></figure><p>如果解构不成功，变量的值就等于undefined</p><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; foo: <span class="string">"aaa"</span>, bar: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo // <span class="string">"aaa"</span></span><br><span class="line">bar // <span class="string">"bbb"</span></span><br><span class="line"></span><br><span class="line">如果变量名与属性名不一致，必须写成下面这样。</span><br><span class="line"><span class="keyword">let</span> &#123; foo: baz &#125; = &#123; foo: <span class="string">'aaa'</span>, bar: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">baz // <span class="string">"aaa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; first: <span class="string">'hello'</span>, last: <span class="string">'world'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; first: f, last: l &#125; = obj;</span><br><span class="line">f // <span class="string">'hello'</span></span><br><span class="line">l // <span class="string">'world'</span></span><br><span class="line">这实际上说明，对象的解构赋值是下面形式的简写</span><br><span class="line"><span class="keyword">let</span> &#123; foo: foo, bar: bar &#125; = &#123; foo: <span class="string">"aaa"</span>, bar: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</span><br><span class="line">对象的解构也可以指定默认值</span><br><span class="line">var &#123;x = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">x // <span class="number">3</span></span><br><span class="line">默认值生效的条件是，对象的属性值严格等于undefined。</span><br><span class="line">如果解构失败，变量的值等于undefined。</span><br><span class="line">由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span> : first, [arr.length - <span class="number">1</span>] : last&#125; = arr;</span><br><span class="line">first // <span class="number">1</span></span><br><span class="line">last // <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="regexp">//</span> <span class="string">"h"</span></span><br><span class="line">b <span class="regexp">//</span> <span class="string">"e"</span></span><br><span class="line">c <span class="regexp">//</span> <span class="string">"l"</span></span><br><span class="line">d <span class="regexp">//</span> <span class="string">"l"</span></span><br><span class="line">e <span class="regexp">//</span> <span class="string">"o"</span></span><br></pre></td></tr></table></figure><h3 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h3><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]].map(<span class="function">(<span class="params">[a, b]</span>) =&gt;</span> a + b);</span><br><span class="line"><span class="comment">// [ 3, 7 ]</span></span><br><span class="line">函数参数的解构也可以使用默认值。</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><p>模板字符串中嵌入变量，需要将变量名写在${}之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串中嵌入变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动web</title>
      <link href="/2018/06/17/%E7%A7%BB%E5%8A%A8web/"/>
      <url>/2018/06/17/%E7%A7%BB%E5%8A%A8web/</url>
      <content type="html"><![CDATA[<h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><p>1.流式布局：就是百分比布局，非固定像素，内容向两侧填充，理解成流动的布局，就是流式布局<br>2.viewport：移动端特有。这是一个虚拟的区域，承载网页的，关系是：浏览器承载viewport，viewport承载网页</p><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p>适配要求：</p><ol><li>网页宽度必须和浏览器保持一致</li><li>默认显示的缩放比例和PC端保持1:1</li><li>不允许用户自行缩放网页<br>适配设置：<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attr">name="viewport"</span></span><br><span class="line">  <span class="attr">content="width=device-width,</span> <span class="attr">user-scalable=no,</span> <span class="attr">initial-scale=1.0,</span> <span class="attr">maximum-scale=1.0,</span> <span class="attr">minimum-scale=1.0"&gt;</span> 设置视口的标签，在head里面并且应该紧接着编码设置</span><br></pre></td></tr></table></figure></li></ol><p>viewport的功能</p><ol><li>width 可以设置宽度</li><li>height 可以设置高度</li><li>initial-scale 可以设置默认的缩放比例</li><li>user-scalable 可以设置是否允许用户自行缩放</li><li>maximum-scale 可以设置最大缩放比例</li><li>minimum-scale 可以设置最小缩放比例</li></ol>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式</title>
      <link href="/2018/06/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/06/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>组成：由元字符或者是限定符组成一个式子<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>元字符</span><br><span class="line">. 表示的是：除了\n以外任意一个字符</span><br><span class="line">[] 表示的是：范围 任意的单个字符，括号中的任意一个字符</span><br><span class="line">[] 另一个含义：把正在表达式中元字符的意义干掉</span><br><span class="line">| 表示或的意思。“或”的优先级非常低，最后才计算</span><br><span class="line">() <span class="number">1.</span>改变优先级 <span class="number">2</span> 提取组（分组）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>限定符</span><br><span class="line">&#123;n&#125; 表示前面的表达式必须出现n次</span><br><span class="line">&#123;n,&#125;表示前面的表达式至少出现n次，最多不限</span><br><span class="line">&#123;n,m&#125;表示前面的表达式至少出现n次，最多出现m次</span><br><span class="line">* 表示出现<span class="number">0</span>或多次</span><br><span class="line">+ 表示出现<span class="number">1</span>次或多次</span><br><span class="line">? 表示<span class="number">0</span>次或<span class="number">1</span>次 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;?的另外一个意思是：终止贪婪模式</span><br><span class="line">^ 表示的是以什么开始，或者是取非</span><br><span class="line">^[<span class="number">0</span><span class="number">-9</span>]以数字开头</span><br><span class="line">^[a-z]以小写字母开始</span><br><span class="line">[^<span class="number">0</span><span class="number">-9</span>]取反，非数字</span><br><span class="line">[^a-z]非小写字母</span><br><span class="line">$ 表示的是以什么结束</span><br><span class="line">[a-z]$ 表示必须以小写字母结束</span><br><span class="line">\d 数字中的一个</span><br><span class="line">\D 非数字中的一个</span><br><span class="line">\s 空白符中的一个</span><br><span class="line">\S 非空白符中的一个</span><br><span class="line">\w 非特殊符号</span><br><span class="line">\W 特殊符号</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js基础-二</title>
      <link href="/2018/06/05/js%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
      <url>/2018/06/05/js%E5%9F%BA%E7%A1%80-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>创建对象的三种方式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>字面量的方式</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="number">2.</span>调用系统的构造函数</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="number">3.</span>自定义构造函数方式</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实例对象和构造函数的关系"><a href="#实例对象和构造函数的关系" class="headerlink" title="实例对象和构造函数的关系"></a>实例对象和构造函数的关系</h3><ol><li>实例对象是通过构造函数来创建的</li><li>两种方式判断对象是不是这个数据类型<br>通过构造器的方式 实例对象.构造器 == 构造函数名字<br>对象 instanceof 构造函数名字</li></ol><h3 id="构造函数，原型对象，实例对象"><a href="#构造函数，原型对象，实例对象" class="headerlink" title="构造函数，原型对象，实例对象"></a>构造函数，原型对象，实例对象</h3><p>原型的作用之一：数据共享，节省内存空间<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造函数可以实例化对象，</span><br><span class="line">构造函数有一个属性prototype，是构造函数的原型对象</span><br><span class="line">构造函数的原型对象（prototype）中有一个<span class="function"><span class="keyword">constructor</span>构造器，这个构造器指向的就是自己所在的原型对象所在的构造函数</span></span><br><span class="line"><span class="function">实力对象的原型对象（__<span class="title">proto__</span>）指向的是该构造函数的原型对象</span></span><br><span class="line"><span class="function">构造函数的原型对象（<span class="title">prototype</span>）中的方法是可以被实例对象直接访问的</span></span><br></pre></td></tr></table></figure></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">是一种关系，实例对象和原型对象之间的关系，关系是通过原型（<span class="strong">__proto__</span>）来联系的</span><br><span class="line">原型对象方法中的this就是实例对象</span><br><span class="line"></span><br><span class="line">原型指向是可以改变的</span><br><span class="line">构造函数的原型对象prototype指向如果改变了，实例对象的原型（<span class="strong">__proto__</span>）指向也会发生改变</span><br><span class="line">实例对象和原型对象之间的关系是通过原型（<span class="strong">__proto__</span>)联系起来的，这个关系是原型链</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>为了数据共享，改变原型指向，做到了继承（通过改变原型指向实习的继承）<br>缺陷：因为改变原型指向的同时实现继承，直接初始化了属性，继承过来的属性的值都是一样的。只能重新调用对象的属性进行重新赋值<br>解决方案：借用构造函数，把要继承的父级的构造函数拿过来，使用一下就可以<br>构造函数名字.call(当前对象)，</p><p>组合继承：原型继承+借用构造函数</p><p>拷贝继承：把一个对象中的属性或者方法直接复制到另一个对象中</p><h3 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h3><p>函数声明如果放在if-else语句中，再IE8的浏览器中会出现问题<br>以后宁愿用函数表达式，都不用函数声明</p><h3 id="apply-和-call"><a href="#apply-和-call" class="headerlink" title="apply 和 call"></a>apply 和 call</h3><p>作用：可以改变this的指向<br>      也是函数的调用方式<br>apply和call方法中如果没有传入参数，或者传入的是null，那么调用该方法的函数对象中this就是默认的windows</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>变量的使用范围（局部作用域和全局作用域）<br>js没有块级作用域—一对括号中定义的变量，这个变量可以再大括号外面使用<br>函数中定义的变量是局部变量<br>作用域链：变量的使用，从里向外，层层的搜索，搜索到了就可以直接使用了</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js基础</title>
      <link href="/2018/05/16/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/16/js%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">undefined 变量未初始化</span><br><span class="line">null 值为空</span><br><span class="line">NaN not a number 不是一个数字 但是数字类型</span><br><span class="line"><span class="section">== 比较运算符，判断内容是否相同，不判断数据类型</span></span><br><span class="line"><span class="section">=== 不仅判断内容，还判断数据类型</span></span><br><span class="line">!= 只判断内容是否不相同，不判断数据类型</span><br><span class="line">!== 不全等于 不仅判断内容是否不相同，还判断数据类型是否不相同</span><br></pre></td></tr></table></figure><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>预解析会把变量的声明和函数的声明提前</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p> DOM 定义了访问和操作 HTML 文档的标准方法<br> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 通过id获取元素</span><br><span class="line"><span class="built_in">document</span>.getElementById(elementId)</span><br><span class="line"><span class="number">2.</span> 通过标签名获取元素</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(tagName)</span><br><span class="line"><span class="number">3.</span> 通过name获取元素</span><br><span class="line"><span class="built_in">document</span>.getElementsByName(elementName)</span><br><span class="line"><span class="number">4.</span> 通过类名获取元素</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(className)</span><br><span class="line"><span class="number">5.</span> 通过选这期获取元素</span><br><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelector</span>(选择器);</span><br><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(选择器)</span><br></pre></td></tr></table></figure></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>onclick 点击事件<br>onmouseover 鼠标移到某元素之上<br>onmouseout 鼠标从某元素移开<br>onfocus    元素获取焦点时触发<br>onblur    元素失去焦点时触发</p><p>如果想要获取标签和内容，使用innerHtml，如果想要设置标签使用innerHtml。<br>如果想要设置文本，用innerText或者innerHtml或者textContent</p><p>获取自定义属性 getAttribute(name)  设置自定义属性 setAttribute(name,value)<br>移除自定义属性也可以移除元素自带的属性 removeAttribute(name)</p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>页面上的标签，属性，文本都可以称为节点<br>nodeType:节点的类型 1表示标签，2表示属性，3表示文本<br>nodeName：节点的名字，标签节点—大写的标签名字，属性节点—小写的属性名 文本节点—#text<br>nodeValue: 节点的值 标签节点—null, 属性节点—属性值,文本节点—文本内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前节点的父级节点</span></span><br><span class="line">对象.parentNode</span><br><span class="line"><span class="comment">//获取当前节点的父级元素</span></span><br><span class="line">对象.parentElement</span><br><span class="line"><span class="comment">//获取当前节点的子级节点</span></span><br><span class="line">对象.childNodes</span><br><span class="line"><span class="comment">//获取当前节点的子元素</span></span><br><span class="line">对象.children</span><br><span class="line"><span class="comment">//获取当期节点的第一个子级节点</span></span><br><span class="line">对象.firstChild</span><br><span class="line"><span class="comment">//获取当前节点的第一个子级元素</span></span><br><span class="line">对象.firstElementChild</span><br><span class="line"><span class="comment">//获取当前节点的最后一个子级节点</span></span><br><span class="line">对象.lastChild</span><br><span class="line"><span class="comment">//获取当前节点的最后一个子级元素</span></span><br><span class="line">对象.lastElementChild</span><br><span class="line"><span class="comment">//获取当前节点的前一个兄弟节点</span></span><br><span class="line">对象.previousSibling</span><br><span class="line"><span class="comment">//获取当前节点的前一个兄弟元素</span></span><br><span class="line">对象.previousElementSibling</span><br><span class="line"><span class="comment">//获取当前节点的后一个兄弟节点</span></span><br><span class="line">对象.nextSibling</span><br><span class="line"><span class="comment">//获取当前节点的后一个兄弟元素</span></span><br><span class="line">对象.nextElementSibling</span><br></pre></td></tr></table></figure></p><h2 id="元素的创建"><a href="#元素的创建" class="headerlink" title="元素的创建"></a>元素的创建</h2><p>元素创建的三种方式</p><ol><li><p>document.write(“标签的代码及内容”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缺陷：如果是在页面加载完毕后，此时通过这种方式创建元素，那么页面上存在的所有内容全部被干掉</span><br></pre></td></tr></table></figure></li><li><p>对象.innerHtml=”标签及代码”;</p></li><li>document.createElement(“标签的名字”)<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建元素</span></span><br><span class="line"><span class="keyword">var</span> pobj = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>)</span><br><span class="line"><span class="comment">//把创建后的子元素追加到父元素中</span></span><br><span class="line">obj.appendChild(pobj)</span><br></pre></td></tr></table></figure></li></ol><h2 id="为元素绑定事件"><a href="#为元素绑定事件" class="headerlink" title="为元素绑定事件"></a>为元素绑定事件</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>参数1：事件的类型<span class="params">-----</span>事件的名字，没有on</span><br><span class="line"><span class="string">//</span>参数2：事件处理函数</span><br><span class="line"><span class="string">//</span>参数3：boolean ，目前就写<span class="literal">false</span></span><br><span class="line"><span class="string">//</span>同一个元素可以绑定多个相同的事件</span><br><span class="line">addEventListener<span class="params">()</span>; <span class="string">//</span>谷歌火狐支持，IE8不支持</span><br><span class="line"></span><br><span class="line"><span class="string">//</span>参数1：事件类型<span class="params">----</span>事件的名字，有on</span><br><span class="line"><span class="string">//</span>参数2：事件处理函数</span><br><span class="line">attachEvent<span class="params">()</span>; <span class="string">//</span>谷歌火狐不支持，IE8支持</span><br></pre></td></tr></table></figure><blockquote><p>判断浏览是否支持这个方法，直接:对象.方法名（不带括号）</p></blockquote><h2 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h2><p>用什么方式绑定事件，就应该用对应的方式解绑事件</p><ol><li>对象.on事件名字 = 事件处理函数 —&gt; 绑定事件<br>对象.on事件名字 = null; —&gt; 解绑事件</li><li>对象.addEventListener 绑定事件<br>对象.removeEventListener(“事件名字”,”命名函数”,false); 解绑事件</li><li>对象.attachEvent 绑定事件<br>对象.detachEvent(“有on事件名”,”命名函数”);解绑事件</li></ol><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>多个元素嵌套，有层次关系，这些元素都注册了相同的事件，如果里面元素的事件触发了，外面元素的事件也自动触发。<br>阻止事件冒泡<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span> <span class="comment">// IE特有的，谷歌支持，火狐不支持</span></span><br><span class="line">obj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)&#125;</span>&#123;</span><br><span class="line">  e.stopPropagation()<span class="comment">//谷歌火狐支持，ie8不支持</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事件有个三个阶段 e.eventPhase</p><ol><li>事件捕获阶段：从外向内</li><li>事件目标阶段：最开始选择的元素</li><li>事件冒泡阶段: 从里向外</li></ol><p>addEventListener(“没有on的事件名字”,”函数”,”控制事件阶段”)</p><h2 id="BOM-Browser-Object-Model-浏览器对象模型"><a href="#BOM-Browser-Object-Model-浏览器对象模型" class="headerlink" title="BOM Browser Object Model 浏览器对象模型"></a>BOM Browser Object Model 浏览器对象模型</h2><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window。<br>注意：window下一个特殊的属性：window.name</p><p>//页面加载完毕，这个事件就会触发<br>window.onload<br>//页面关闭后触发 - IE8支持,谷歌不支持<br>window.onunload<br>//页面关闭之前 - IE8支持,谷歌不支持<br>window.onbeforeunload</p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span>.hash <span class="comment">// #号及后面的内容</span></span><br><span class="line"><span class="keyword">location</span>.hoat <span class="comment">// 主机名及端口号</span></span><br><span class="line"><span class="keyword">location</span>.hostname <span class="comment">// 主机名</span></span><br><span class="line"><span class="keyword">location</span>.pathname <span class="comment">// 文件的路径---相对路径</span></span><br><span class="line"><span class="keyword">location</span>.port <span class="comment">// 对口号</span></span><br><span class="line"><span class="keyword">location</span>.protocol <span class="comment">// 协议</span></span><br><span class="line"><span class="keyword">location</span>.search <span class="comment">// ?号及后面的内容</span></span><br><span class="line"><span class="comment">//设置页面的地址(有历史记录)</span></span><br><span class="line"><span class="keyword">location</span>.href = 地址名</span><br><span class="line"><span class="keyword">location</span>.assign(地址名);</span><br><span class="line"><span class="comment">//重新加载刷新</span></span><br><span class="line"><span class="keyword">location</span>.reload();</span><br><span class="line"><span class="comment">//替换页面的地址(没有历史)</span></span><br><span class="line"><span class="keyword">location</span>.replace();</span><br></pre></td></tr></table></figure><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后退</span></span><br><span class="line">history.back<span class="comment">()</span>;</span><br><span class="line"><span class="comment">//前进</span></span><br><span class="line">history.forward<span class="comment">()</span>;</span><br><span class="line"><span class="comment">//正数前进，负数后退</span></span><br><span class="line">history.go<span class="comment">()</span>;</span><br></pre></td></tr></table></figure><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>navigator.userAgent //可以判断用户浏览器类型<br>navigator.platform //可以判断浏览器所在的系统平台类型</p><h2 id="定时器-计时器"><a href="#定时器-计时器" class="headerlink" title="定时器/计时器"></a>定时器/计时器</h2><p>setInterval();<br>setTimeout();</p><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><p>对象.offsetWidth 获取元素的宽度（包含元素的左右边框，左右内边距，垂直滚动条）<br>对象.offsetHeight 获取元素的高度（包含元素的上下边框，上下内边距，垂直滚动条）<br>对象.offsetLeft 获取元素距离左边的距离<br>没有脱离文档流: offsetLeft = 父级元素的margin+父级元素的padding+父级元素的border + 自己的margin<br>脱离文档流: offsetLeft = 自己的left和自己的margin<br>对象.offsetTop 获取元素距离上边的距离<br>//获取body<br>document.body 获取的是元素<br>//获取title<br>document.title 获取的是值<br>//获取html<br>document.documentElement</p><h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><p>scrollWidth:元素中内容的实际的宽(没有边框)如果没有内容就是元素的宽<br>scrollHeight:元素中内容的实际的高(没有边框)如果没有内容就是元素的高<br>scrollTop:向上滚出去的距离<br>scrollLeft:向左滚出去的距离<br>滚动事件：onscroll<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取浏览器的滚动距离</span><br><span class="line"><span class="built_in">window</span>.onscroll</span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">|| <span class="built_in">document</span>.body.scrollTop ||　<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scrollLeft = <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollLeft</span><br><span class="line">|| <span class="built_in">document</span>.body.scrollLeft ||　<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>clientWidth:元素内部的宽度（包含内边距），不包括左右边框和垂直滚动条<br>clientHeight:元素内部的高度（包含内边距），不包括上下边框和水平滚动条<br>clientLeft: 左边边框的宽度<br>clientTop:上边边框的高度</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css入门(三)</title>
      <link href="/2018/05/07/css%E5%85%A5%E9%97%A8-%E4%B8%89/"/>
      <url>/2018/05/07/css%E5%85%A5%E9%97%A8-%E4%B8%89/</url>
      <content type="html"><![CDATA[<h2 id="标准流normal-flow-文档流"><a href="#标准流normal-flow-文档流" class="headerlink" title="标准流normal flow(文档流)"></a>标准流normal flow(文档流)</h2><p> 元素自上而下，自左而右，块元素独占一行，行内元素在一行显示，碰到父元素的边框换行。</p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>float: left | right</p><blockquote><p>元素浮动之后不占据原来的位置(脱标)<br>浮动的盒子在一行显示<br>行内元素浮动之后转换为行内块元素(不推荐使用，转行内块元素最好使用display:inline-block;)<br>浮动找浮动，不浮动找不浮动<br>浮动只影响后面的元素<br>浮动元素顶部为基准对齐</p></blockquote><h3 id="浮动的作用"><a href="#浮动的作用" class="headerlink" title="浮动的作用"></a>浮动的作用</h3><blockquote><p>文本饶图<br>制作导航<br>网页布局</p></blockquote><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>当父盒子没有定义高度，嵌套的盒子浮动之后，下边的元素发生位置错误</p><blockquote><p>清除浮动不是不用浮动，清除浮动产生的不利影响</p></blockquote><p>清除浮动的方法：</p><p>clear : left | right | both（工作中用的最多）</p><blockquote><p>额外标签法<br>在最后一个浮动元素后添加标签(一般用不上)</p></blockquote><blockquote><p>给浮动盒子的父级元素使用 overflow:hidden; bfc</p></blockquote><blockquote><p>伪元素清除 给浮动元素的父级使用（工作中使用这种方式）<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兼容IE浏览器</span></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">  zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="css初始化"><a href="#css初始化" class="headerlink" title="css初始化"></a>css初始化</h2><p>为了考虑到浏览器的兼容问题，其实不同浏览器对有些标签的默认值是不同的，如果没有对css初始化往往会出现浏览器之间的页面差异<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">腾讯：</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">select</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span><span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>,HELVETICA;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">-webkit-text-size-adjust</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#2d374b</span>;<span class="attribute">text-decoration</span>:none&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#cd0200</span>;<span class="attribute">text-decoration</span>:underline&#125;</span><br><span class="line"><span class="selector-tag">em</span>&#123;<span class="attribute">font-style</span>:normal&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">vertical-align</span>:middle&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">word-wrap</span>:break-word&#125;</span><br><span class="line">新浪：</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">img</span>,<span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">margin-top</span>:<span class="number">5px</span>;<span class="attribute">font-family</span>:<span class="string">"SimSun"</span>,<span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">list-style-type</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">select</span>,<span class="selector-tag">input</span>,<span class="selector-tag">img</span>,<span class="selector-tag">select</span>&#123;<span class="attribute">vertical-align</span>:middle;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>:<span class="number">#009</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#800080</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">color</span>:<span class="number">#c00</span>;<span class="attribute">text-decoration</span>:underline;&#125;</span><br><span class="line">淘宝：</span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125;</span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125;</span><br><span class="line"><span class="selector-tag">small</span>&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125;</span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125;</span><br><span class="line"><span class="selector-tag">sub</span>&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125;</span><br><span class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="overflow（溢出的处理方式）"><a href="#overflow（溢出的处理方式）" class="headerlink" title="overflow（溢出的处理方式）"></a>overflow（溢出的处理方式）</h2><table><thead><tr><th>属性</th><th>标签</th></tr></thead><tbody><tr><td>overflow:visible</td><td>默认值。内容不会被修剪，会呈现在元素框之外</td></tr><tr><td>overflow:hidden</td><td>内容会被修剪，并且其余内容是不可见的</td></tr><tr><td>overflow:scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余内容</td></tr><tr><td>overflow:auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余内容</td></tr></tbody></table><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h2><p>定位方向 : left | right | top | bottom</p><h3 id="static-静态定位。默认值，就是文档流"><a href="#static-静态定位。默认值，就是文档流" class="headerlink" title="static 静态定位。默认值，就是文档流"></a>static 静态定位。默认值，就是文档流</h3><h3 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h3><p>特点：</p><ol><li>元素使用绝对定位之后不占据原来的位置（脱标）</li><li>元素使用绝对定位，位置是从浏览器出发。</li><li>嵌套的盒子，父盒子没有使用定位，子盒子绝对定位，子盒子位置从浏览器出发。</li><li>嵌套的盒子，父盒子使用定位，子盒子绝对定位，子盒子位置从父元素位置出发</li><li>给行内元素使用绝对定位之后，转换为行内块（不推荐使用，推荐使用display:inline-block）</li></ol><h3 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h3><p>特点：</p><ol><li>使用相对定位，位置从自身出发。</li><li>还占据原来的位置。</li><li>子绝父相（父元素相对定位，子元素相对定位）(重点重点重点)</li><li>行内元素使用相对定位不能转行内块</li></ol><h3 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h3><p>特点:</p><ol><li>固定定位之后，不占据原来的位置</li><li>元素使用固定定位之后，位置从浏览器出发</li><li>行内元素使用固定位后，会转化为行内块(不推荐使用，推荐使用display:inline-block)</li></ol><h2 id="定位的盒子居中显示"><a href="#定位的盒子居中显示" class="headerlink" title="定位的盒子居中显示"></a>定位的盒子居中显示</h2><p>margin: 0 auto; 只能让标准流的盒子居中对齐<br>定位的盒子居中：先左右走父元素盒子的一半50%,在向左走子盒子的一半(margin-left:负值)<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>:往回走自身宽度的一般</span><br></pre></td></tr></table></figure></p><h2 id="图片和文字垂直居中对齐"><a href="#图片和文字垂直居中对齐" class="headerlink" title="图片和文字垂直居中对齐"></a>图片和文字垂直居中对齐</h2><p>vertical-align 对inline-block最敏感。默认值：baseline基线对齐</p><h2 id="Css可见性"><a href="#Css可见性" class="headerlink" title="Css可见性"></a>Css可见性</h2><p>overflow:hidden;溢出隐藏<br>visibility:hidden;隐藏元素 隐藏之后还占据原来的位置<br>display:none;隐藏元素 隐藏之后不占据原来的位置<br>display：block; 元素可见</p><p>display:none 和 display:block 常配合js使用</p><h3 id="css值内容移除-网页优化"><a href="#css值内容移除-网页优化" class="headerlink" title="css值内容移除(网页优化)"></a>css值内容移除(网页优化)</h3><ol><li>使用text-indent:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-indent</span>: -<span class="number">5000em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">input[type=text][class=user]&#123;</span></span><br><span class="line"><span class="string">width: 100px;</span></span><br><span class="line"><span class="string">height: 50px;</span></span><br><span class="line"><span class="string">background: red</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;input type="</span>text<span class="string">" class="</span>user<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;input type="</span>text<span class="string">" class="</span>pwd<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="盒子里元素垂直居中"><a href="#盒子里元素垂直居中" class="headerlink" title="盒子里元素垂直居中"></a>盒子里元素垂直居中</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css入门(二)</title>
      <link href="/2018/05/02/css%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
      <url>/2018/05/02/css%E5%85%A5%E9%97%A8-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h2><p>浏览器默认行高是16px，行高是基线和基线之间的距离<br>行高 = 文字大小+上下边距<br>一行文字行高和父元素高度一致的时候，垂直居中显示</p><h3 id="行高的单位"><a href="#行高的单位" class="headerlink" title="行高的单位"></a>行高的单位</h3><table><thead><tr><th style="text-align:center">行高单位</th><th style="text-align:center">文字大小</th><th style="text-align:center">行高</th></tr></thead><tbody><tr><td style="text-align:center">20px</td><td style="text-align:center">20px</td><td style="text-align:center">20px</td></tr><tr><td style="text-align:center">2em</td><td style="text-align:center">20px</td><td style="text-align:center">40px</td></tr><tr><td style="text-align:center">150%</td><td style="text-align:center">20px</td><td style="text-align:center">30px</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">20px</td><td style="text-align:center">40px</td></tr></tbody></table><p>总结：单位除了像素以外，行高都是与文字大小乘积</p><table><thead><tr><th style="text-align:center">行高单位</th><th style="text-align:center">父元素文字大小</th><th style="text-align:center">子元素文字大小</th><th style="text-align:center">行高</th></tr></thead><tbody><tr><td style="text-align:center">40px</td><td style="text-align:center">20px</td><td style="text-align:center">30px</td><td style="text-align:center">40px</td></tr><tr><td style="text-align:center">2em</td><td style="text-align:center">20px</td><td style="text-align:center">30px</td><td style="text-align:center">40px</td></tr><tr><td style="text-align:center">150%</td><td style="text-align:center">20px</td><td style="text-align:center">30px</td><td style="text-align:center">30px</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">20px</td><td style="text-align:center">30px</td><td style="text-align:center">60px</td></tr></tbody></table><p>总结:不带单位时，行高是和子元素文字大小相乘，em和%是和父元素文字大小相乘。行高以像素为单位，就是定义的行高值。<br>推荐行高使用像素为单位</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>线型：solie 实线 dotted 点线 dashed 虚线<br>属性连写:没有顺序要求，线型必须写</p><h3 id="边框合并"><a href="#边框合并" class="headerlink" title="边框合并"></a>边框合并</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">collapse</span>: <span class="built_in">collapse</span></span><br><span class="line">去掉表单边框：</span><br><span class="line"><span class="built_in">border</span>: <span class="number">0</span> none;</span><br><span class="line">去掉轮廓线</span><br><span class="line">outline-<span class="built_in">style</span>:none</span><br><span class="line">&lt;<span class="built_in">label</span> <span class="keyword">for</span>=<span class="string">"id"</span>&gt;&lt;/<span class="built_in">label</span>&gt; 获取光标焦点</span><br><span class="line">:focus 获取光标焦点</span><br></pre></td></tr></table></figure><h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p>padding: 20px; 上右下左内边距都是20px<br>padding：20px 30px; 上下20px 左右30px<br>padding: 20px 30px 40px; 上20px 左右30px 下30px<br>padding: 20px 30px 40px 50px; 上右下左</p><blockquote><p>影响盒子宽度的因素：内边距 边框<br>盒子的宽度=定义的宽度 + 左右内边距 + 边框宽度<br>继承的盒子一般不会被撑大（水平方向）<br>包含的盒子，如果子盒子没有定义宽度，给子盒子设置左右内边距，不会撑大盒子。</p></blockquote><h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>垂直方向外边距合并：锤子方向的2个盒子，如果都设置了垂直方向外边距，取的是设置的比较大的值<br>外边距塌陷：嵌套的盒子，直接给子盒子设置垂直方向外边距的时候，会发生外边距的塌陷<br>解决方法：</p><ol><li>给父盒子设置边框(不推荐使用)</li><li>给父盒子设置overflow:hidden; bfc 格式化上下文</li></ol><h3 id="Fireworks的基本使用"><a href="#Fireworks的基本使用" class="headerlink" title="Fireworks的基本使用"></a>Fireworks的基本使用</h3>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Html入门</title>
      <link href="/2018/04/27/Html%E5%85%A5%E9%97%A8/"/>
      <url>/2018/04/27/Html%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>入门这些东西以前都看过，学过，可是好久不用发现又都忘记啦！以后准备把学过的知识全部记录下来，方便以后回顾。</p><h2 id="Html-Htper-text-markup-language-入门"><a href="#Html-Htper-text-markup-language-入门" class="headerlink" title="Html(Htper text markup language)入门"></a>Html(Htper text markup language)入门</h2><p>基本结构<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>基本标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>文本加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>文本倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图片路径"</span> <span class="attr">alt</span>=<span class="string">"替换文字"</span> <span class="attr">title</span>=<span class="string">"提示文本"</span> /&gt;</span></span><br><span class="line">超链接实现锚点</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#标签id"</span>/&gt;</span></span><br><span class="line">空链</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> /&gt;</span></span><br><span class="line">超链接优化写法在<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>中添加如下代码：</span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">列表</span><br><span class="line">无序列表：ul li</span><br><span class="line">有序列表：ol li</span><br><span class="line">自定义列表 dl dt dd</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span> 小标题</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span> 解释标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>meta标签和link标签<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">seo 搜索引擎优化 关键字</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"keywords"</span> <span class="attribute">content</span>=<span class="string">"Java,Android,PHP,IOS,Html"</span>&gt;</span><br><span class="line">网页描述</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"description"</span> <span class="attribute">content</span>=<span class="string">"这是一个网页描述"</span>&gt;</span><br><span class="line">网页重定向</span><br><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">"refresh"</span> <span class="attribute">content</span>=<span class="string">"5;https://www.google.cn"</span>&gt;</span><br><span class="line"></span><br><span class="line">link链接外部样式表</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">""</span>&gt;</span><br><span class="line">link icon图标</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"icon"</span> <span class="attribute">href</span>=<span class="string">"图标路径"</span>&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css入门</title>
      <link href="/2018/04/27/css%E5%85%A5%E9%97%A8/"/>
      <url>/2018/04/27/css%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="CSS-层叠样式表-Cascading-style-sheets-选择器"><a href="#CSS-层叠样式表-Cascading-style-sheets-选择器" class="headerlink" title="CSS(层叠样式表 Cascading style sheets)选择器"></a>CSS(层叠样式表 Cascading style sheets)选择器</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本构成</span><br><span class="line">选择器&#123;属性:值;&#125;</span><br><span class="line"><span class="attribute">text-indent</span>:<span class="number">2em</span>; 首行缩进</span><br></pre></td></tr></table></figure><blockquote><p>基础选择器</p><blockquote><p>标签选择器 标签{属性:值;}<br>类选择器 .自定义类名{属性:值;}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"type/css"</span>&gt;</span><br><span class="line">  .box&#123;</span><br><span class="line">    font-size:<span class="number">30</span>px</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="box" &gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>ID选择器 #自定义名称{属性:值;} id具有唯一性。同一个页面不能重复<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"type/css"</span>&gt;</span><br><span class="line">  #box&#123;</span><br><span class="line">    font-size:<span class="number">30</span>px</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="box" &gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>通配符选择器 *{属性:值;}</p></blockquote></blockquote><blockquote><p>复合选择器 两个或者两个以上的基础选择器通过不同的方式连接在一起</p><blockquote><p>交集选择器 标签+类/ID选择器{属性:值;}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"type/css"</span>&gt;</span><br><span class="line">  .box&#123;</span><br><span class="line">    font-size:<span class="number">30</span>px</span><br><span class="line">  &#125;</span><br><span class="line">  div.box&#123;</span><br><span class="line">    color:red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="box" &gt;呵呵&lt;/</span>div&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>后代选择器 选择器+空格+选择器{属性:值;}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">特点：无限制隔代</span><br><span class="line">标签、类选择器、Id选择器自由组合</span><br><span class="line">&lt;style type=<span class="string">"type/css"</span>&gt;</span><br><span class="line">  div p span&#123;</span><br><span class="line">    font-size:<span class="number">50</span>px;</span><br><span class="line">  &#125;</span><br><span class="line">  .box span&#123;</span><br><span class="line">    font-size:<span class="number">50</span>px;</span><br><span class="line">    background-color:red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="box"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;演示示例&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>子代选择器 选择器&gt;选择器{属性:值;}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">特点：选中直接下一代元素</span><br><span class="line">&lt;style type=<span class="string">"type/css"</span>&gt;</span><br><span class="line">  div&gt;span&#123;</span><br><span class="line">    color:red;</span><br><span class="line">    font-size:<span class="number">40</span>px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;演示示例&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;span&gt;演示示例&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>并集选择器 选择器,选择器,选择器{属性:值;}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"type/css"</span>&gt;</span><br><span class="line">  div,p,span,h1&#123;</span><br><span class="line">    font-size:<span class="number">30</span>px;</span><br><span class="line">    color:red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div&gt;演示示例&lt;/</span>div&gt;</span><br><span class="line">&lt;p&gt;演示示例&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;演示示例&lt;/</span>span&gt;</span><br><span class="line">&lt;h1&gt;演示示例&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h2 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h2><blockquote><p>内嵌式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"type/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>外链式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">"xxx.css"</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>行内样式表<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-size:30px;color:red;"</span> &gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="标签分类（显示方式）"><a href="#标签分类（显示方式）" class="headerlink" title="标签分类（显示方式）"></a>标签分类（显示方式）</h2><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>典型代表：div p h1-h5 ul li</p><p>特点：</p><ol><li>独占一行</li><li>可以设置宽高</li><li>嵌套下，子块元素宽度(没有定义的情况下)和父块元素宽度一致</li></ol><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>典型代表：span a strong em del ins</p><p>特点：</p><ol><li>在一行上显示</li><li>不能直接定义宽高</li></ol><h3 id="行内快元素（内联元素）"><a href="#行内快元素（内联元素）" class="headerlink" title="行内快元素（内联元素）"></a>行内快元素（内联元素）</h3><p>典型代表：image input</p><p>特点:</p><ol><li>在一行上显示</li><li>可以直接设置宽高</li></ol><h3 id="块元素、行内元素"><a href="#块元素、行内元素" class="headerlink" title="块元素、行内元素"></a>块元素、行内元素</h3><p>块元素转行内元素</p><blockquote><p>display: inline;</p></blockquote><p>行内元素转块元素</p><blockquote><p>display: block;</p></blockquote><p>块和行内元素转行内块元素</p><blockquote><p>display: inline-block;</p></blockquote><h2 id="css三大特性"><a href="#css三大特性" class="headerlink" title="css三大特性"></a>css三大特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>当多个样式作用于同一个标签时，样式发生了冲突，总是执行后边的代码。</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>继承性发生的前提是包含(嵌套)关系</p><p>总结：文字的所有属性都可以继承</p><p>特殊情况：</p><ol><li>h1-h6不能继承文字大小。</li><li>a标签不能继承颜色</li></ol><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认样式&lt;标签选择器&lt;类选择器&lt;<span class="type">ID</span>选择器&lt;行内样式&lt;!important</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>继承的权重为0</li><li>权重会叠加</li></ol><h2 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a:link&#123;属性:值;&#125; = a&#123;属性:值;&#125; 效果是一样的</span><br><span class="line"></span><br><span class="line">a:link&#123;属性:值;&#125; 链接默认状态</span><br><span class="line">a:visited&#123;属性:值;&#125; 链接访问之后的状态</span><br><span class="line">a:hover&#123;属性:值;&#125; 鼠标放到链接上面显示的状态</span><br><span class="line">a:active&#123;属性:值;&#125; 链接激活的状态</span><br><span class="line"><span class="meta">:focus&#123;属性:值;&#125;</span> 获取焦点</span><br></pre></td></tr></table></figure><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>text-decortation: none | underline | line-through</p><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">background-color 背景颜色</span><br><span class="line">background-image 背景图片</span><br><span class="line">background-<span class="built_in">repeat</span> no-<span class="built_in">repeat</span> | <span class="type">repeat</span>-x | <span class="type">repeat</span>-y | <span class="type">repeat</span> 背景平铺</span><br><span class="line">background-position <span class="built_in">left</span> | <span class="type">rigth</span> | <span class="type">center</span> | <span class="type">top</span> | <span class="type">bottom</span> 背景定位</span><br><span class="line">放位值只写一个的时候，另外一个默认居中</span><br><span class="line">background-position <span class="number">20</span>px <span class="number">30</span>px</span><br><span class="line">写两个具体值的时候，第一个值代表水平方向，第二个代表垂直方向</span><br><span class="line">background-attachment scroll | <span class="type">fixed</span> 背景是否滚动</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建一个属于自己的博客</title>
      <link href="/2018/04/11/HelloHexo/"/>
      <url>/2018/04/11/HelloHexo/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开始搭建一个属于自己博客</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>首先我们需要一个<a href="https://github.com/" target="_blank" rel="noopener">github</a>账号，然后新建一个repo。新建repo命名的时候一定要注意 一定要注意 一定要注意，形式只能是：<code>xxx.github.io</code>(xxx是你github的名称)。到了这一步我们就拥有一个域名为<code>https://xxx.github.io</code>的服务器啦，我们的博客将挂载到这个下面。</p></li><li><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个快速、简洁且高效的博客框架。我们要安装这个来搭建我们的博客。<br>Hexo安装是有前提的，需要先安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a>，nodejs安装完成后。命令输入：<code>npm install -g hexo-cli</code>就可以完成hexo的安装啦！</p></li><li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>这里用git来干嘛？拉取我们github新建的仓库啊。</p></li></ol><h2 id="开始建站"><a href="#开始建站" class="headerlink" title="开始建站"></a>开始建站</h2><p>创建一个文件夹名字blog,命令工具进入刚创建的blog文件输入:</p><blockquote><p>hexo init</p></blockquote><p>或者直接输入:</p><blockquote><p>hexo init <folder></folder></p></blockquote><p>hexo 初始化完成后输入:</p><blockquote><p>npm install</p></blockquote><p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="variable">_config</span>.yml  网站的配置信息，您可以在此配置大部分的参数。</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><p>上面的步骤完成后我们可以输入:</p><blockquote><p>hexo s</p></blockquote><p>成功启动hexo服务器后在浏览器输入：</p><blockquote><p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></blockquote><p>看到这个图片就说明我们已经建立了一个博客网站啦！</p><p><img src="/img/hexo.jpg" alt=""></p><p>##关联github<br>编辑_config.yml配置文件，滚动到最下面看到的应该是这样子的</p><p><img src="/img/hexo_config_raw.jpg" alt=""></p><p>修改类型为git</p><blockquote><p>type: git</p></blockquote><p>增加项repo 值为<a href="https://github.com/xxx/xxx.github.io.git(xxx为github账户名)" target="_blank" rel="noopener">https://github.com/xxx/xxx.github.io.git(xxx为github账户名)</a></p><blockquote><p>repo: <a href="https://github.com/lzfuchen/lzfuchen.github.io.git" target="_blank" rel="noopener">https://github.com/lzfuchen/lzfuchen.github.io.git</a></p></blockquote><p>增加项branch  值为master表明我们网站将挂着再master分支</p><blockquote><p>branch: master</p></blockquote><p>增加项message 值随意，(默认为 Site updated: ‘YYYY-MM-DD HH:mm:ss’)</p><blockquote><p>message: Site updated</p></blockquote><p>最终应该是这个样子的<br><img src="/img/hexo_config_update.jpg" alt=""></p><p>hexo配置完成后，安装插件hexo-deployer-git</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>接着我们配置git</p><blockquote><p>git config –global user.email “<a href="mailto:you@example.com" target="_blank" rel="noopener">you@example.com</a>“<br>git config –global user.name “Your Name”</p></blockquote><blockquote><p>hexo g 生产网站静态资源<br>hexo deploy 部署到网站到github</p></blockquote>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
